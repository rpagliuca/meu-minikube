---
###
### Linkerd Viz Extension Namespace
###
kind: Namespace
apiVersion: v1
metadata:
  name: linkerd-viz
  labels:
    linkerd.io/extension: viz
    pod-security.kubernetes.io/enforce: privileged
  annotations:
---
###
### Metrics API RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
rules:
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
- apiGroups: [""]
  resources: ["pods", "endpoints", "services", "replicationcontrollers", "namespaces"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["policy.linkerd.io"]
  resources: ["servers", "serverauthorizations", "authorizationpolicies", "httproutes"]
  verbs: ["list", "get"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-metrics-api
subjects:
- kind: ServiceAccount
  name: metrics-api
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
---
###
### Prometheus RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "pods"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-prometheus
  labels:
    linkerd.io/extension: viz
    component: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
---
###
### Tap RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["pods", "services", "replicationcontrollers", "namespaces", "nodes"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["daemonsets", "deployments", "replicasets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list" , "get", "watch"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap-admin
  labels:
    linkerd.io/extension: viz
    component: tap
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
- apiGroups: ["tap.linkerd.io"]
  resources: ["*"]
  verbs: ["watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-tap
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-delegator
  labels:
    linkerd.io/extension: viz
    component: tap
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-linkerd-viz-tap-auth-reader
  namespace: kube-system
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: extension-apiserver-authentication-reader
subjects:
- kind: ServiceAccount
  name: tap
  namespace: linkerd-viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-k8s-tls
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRTHp3U0NJSnh4SjdVUTJ0YkJHayszakFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl6TURjeE5qQXdNVGt6TkZvWApEVEkwTURjeE5UQXdNVGt6TkZvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTHNLbmF0THN6OEQ5RUV1Y2xvSndxdnkKdlVmUlN3bkFZWktaTGtvUVFuUmYzTjZ3OXZoYnFhYWhXUTljQitQMSs1NmtKSFYyRnYyNmFZbU9FQzhTdzFIawpTUlM2N3Z0dVJxa0tnT0hkOGZGYXVPY0pwYkl1Ny9PMTVZaE9FYXMwQmdCcDhSS1ZldlkyZ2NPOEpQeWQ0amhVCjdDYTlKTTBXK1NVVjRFdkpLdGxMNkhuMU5uL0JEYjQ0dTk3L3JZcTFjR3dHVWh5VjlQakVlc0JLZHFXQXlPaHEKaG1XRWFGenZGazhnNUJXZDA0SjJvMFo0azh5YWVScFB5dmVWSjdWM0JWWnFOcE0vTitwTmhBdzR4NUQ3TDNxaApIZ1I0SWpLcVhGM1pvZHRqNHgzRXVWNnI3U1JZaGl1MUJ6WDB4ZzMyOHpRV3pTR1BPM28xb01DNWhaWkwxWWtDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFJRHRZQ0UyNHNTMTVtamdMZVdyc2VFZ09lZ3pydlNyCnpraXhSRnVIdU5QbHFMUEtLa0tiWnNiU1RrZm1xdTFtL0RoZjlWMmRvT0hYakdjekZJSmdXMDZUWmFleU1kWW0KRkVqVDE3eXZNZjhHbk82VzBmMmxFWlJjbGgrV2ZHYzVLOFh0UktOOEpGdjFtMlU3emNTRzk0aXVUSWc4Q1RkaQpqVHE2MkRYVUhlRU0rdWtFeTJNVUhjNTF6bDl2RHRwLzVvT2E3bzgvK3lVRGEvL3dldXdUM01XSFBObTdEUHNMCm1HR21kRks1K05lTHVLY2s1VC9WVlZBSmJEdXZpLzFXMjBGZzRKQzBEVmUrUlZEbTFzbXNyNElNRDV5REZmeW4KL29VckJ4M3hYdVFkZ2EvaHBpZU5iUmhqNXZqeTdPS3JHMVhEeHlldC9rMk44RVdVU3UyZEhGTT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdXdxZHEwdXpQd1AwUVM1eVdnbkNxL0s5UjlGTENjQmhrcGt1U2hCQ2RGL2MzckQyCitGdXBwcUZaRDF3SDQvWDducVFrZFhZVy9icHBpWTRRTHhMRFVlUkpGTHJ1KzI1R3FRcUE0ZDN4OFZxNDV3bWwKc2k3djg3WGxpRTRScXpRR0FHbnhFcFY2OWphQnc3d2svSjNpT0ZUc0pyMGt6UmI1SlJYZ1M4a3EyVXZvZWZVMgpmOEVOdmppNzN2K3RpclZ3YkFaU0hKWDArTVI2d0VwMnBZREk2R3FHWllSb1hPOFdUeURrRlozVGduYWpSbmlUCnpKcDVHay9LOTVVbnRYY0ZWbW8ya3o4MzZrMkVERGpIa1BzdmVxRWVCSGdpTXFwY1hkbWgyMlBqSGNTNVhxdnQKSkZpR0s3VUhOZlRHRGZiek5CYk5JWTg3ZWpXZ3dMbUZsa3ZWaVFJREFRQUJBb0lCQVFDYlpBdHZsMW1ZWGNHYwpNV2xCVW1DUUYvK1czZE5ZaTZMRWQweVVyWU40U1hnbTdxQ1AzeDlIMXo0MVc0RVdxM0xhN29WM3JKOFhOcnFkClZCQXYrNGVYem0vRXNEVUJZREdHR0xyUWEyS280SFZEUkttTEtpR2h1Sm0wTHgvUXUwek5KVGJwK0pRS1gyaFoKWkVMYU9KVUx0Y25udVRZTXlTdzkyam5ZM0kwanJ0ZnB5Mm9mVmF0c0dzTSsxQ2VUNDR5WURoM2ZXNFZJT1JvUwpKREFyRkpiUFBZNEtqemVibkVCUGFvMkp5eW5wbGN6RVVVa3VLb0pTZUk5MlJEK1dnS0hIR1BZR1JVdHpkOUEvCnpSd0o2UUI1ajliRE9WU2I1S3hhOXNLU1ZKcmZiZHQyeWtIQk1GckRxNFF1b3ZMMGd2a1pCcDVnUUhvbGVzNngKR0s2ZkJnQXhBb0dCQU5OTGJLRHlRY3Fyc0dubHpqK3NHQ1FiQ0FuRmhId1ZSVEp3Y1k2d082MmgrYXhSak9rTwpZUDZPcm1Na09NeXZRd3NKQ0dETnNpenl4bXMyb3lZelVSMnQ4R040eXh4cktnVkh1aVdmN3JiWEdYV0VjelBKCjRPR2pEWHk2THRmenE1Ri9BaU1uampkNlVaM1Z2OUpZWU50L0pDUjlHazllUFZSS1kzM0lpblAxQW9HQkFPS2QKaXI0aW84dlpjbU9uZUFlZzJKWDJmVVBWWXJBK2tLQklKUDFPeXpMQndQWE1wTWNDcXhnUEZmdENXT2Jzb1YzTwpJdlNTZm9xMlZnM1NFaHNjYUxkcC9EY0ZSNTJLYXNWNjVBT1VXaVh3eGs3MVZFamhkVG53dDZXMGpCeG41bmRICm1Ta3JSR24wTnNjbkkrYUJJMGtQMUtqRkhJOGl1em5XdXlQR3QvTEZBb0dBZmZ1bTFZQWN3bDhFWE4vc3pnSXEKa3J5YldsZ3UybDFFV1FLNmNyMlpsN25RU0hLSGRoNWdydWNjQzNqNWRQRzdJOFZLL1kwb0E2enRxZGQyQjd6cApUS3o5ZkJIMTZRZnNraUZtV0RDNEFNVFlKVDNJQXNVSUZRRkhkV3I5cXoxYXV2SGpzRnBSYmJxOUYwTHZrTmVwClNMYlNNZjkxeElVSVJFM21iSVU2S0ZFQ2dZRUE0YmtvM0xEbVZJTjRsRmpZajBpZzArY2M2UGRnZ01zaEJmWTIKbWZYbEl0NnBsR3hONlVqNElWUE5nbU9ZNkJQbHUrazdHai9kT2MvYk1aTUFvKzZOUTd5WEZEcjNGYTR0SWgyQgpoeXM3RERXallqeXR3cGFJVExsQVJCYnR4TkdkVjB5QysrWDBGRkhFU21Uck5vdUZHUjVpcGVVSXlHNUE3YUM4CjhTcmNTVDBDZ1lBS2Exandaa3E5M3RHOW8rOVZMMlRJblJSVFRXYkdiTVhEL2UzZHREMnlmUmRwTVM0M0NGYjcKeWhaK0lBeVkwSS8zN21NS1NQNUVkUEJkZG9ZK1NONE1Hak5FNENGYmxFUmsxWGs2NUpvRGtuZGsxY0NCeUdiSQovV2Q4MEhtQ3hoSEVkcjFVY1Q5eVptWVdGZ0VIcWNKUkJvSS9JSDFTRk1lSDdpVVh6R2llbGc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: apiregistration.k8s.io/v1
kind: APIService
metadata:
  name: v1alpha1.tap.linkerd.io
  labels:
    linkerd.io/extension: viz
    component: tap
spec:
  group: tap.linkerd.io
  version: v1alpha1
  groupPriorityMinimum: 1000
  versionPriority: 100
  service:
    name: tap
    namespace: linkerd-viz
  caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKVENDQWcyZ0F3SUJBZ0lRTHp3U0NJSnh4SjdVUTJ0YkJHayszakFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOMFlYQXViR2x1YTJWeVpDMTJhWG91YzNaak1CNFhEVEl6TURjeE5qQXdNVGt6TkZvWApEVEkwTURjeE5UQXdNVGt6TkZvd0hqRWNNQm9HQTFVRUF4TVRkR0Z3TG14cGJtdGxjbVF0ZG1sNkxuTjJZekNDCkFTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTHNLbmF0THN6OEQ5RUV1Y2xvSndxdnkKdlVmUlN3bkFZWktaTGtvUVFuUmYzTjZ3OXZoYnFhYWhXUTljQitQMSs1NmtKSFYyRnYyNmFZbU9FQzhTdzFIawpTUlM2N3Z0dVJxa0tnT0hkOGZGYXVPY0pwYkl1Ny9PMTVZaE9FYXMwQmdCcDhSS1ZldlkyZ2NPOEpQeWQ0amhVCjdDYTlKTTBXK1NVVjRFdkpLdGxMNkhuMU5uL0JEYjQ0dTk3L3JZcTFjR3dHVWh5VjlQakVlc0JLZHFXQXlPaHEKaG1XRWFGenZGazhnNUJXZDA0SjJvMFo0azh5YWVScFB5dmVWSjdWM0JWWnFOcE0vTitwTmhBdzR4NUQ3TDNxaApIZ1I0SWpLcVhGM1pvZHRqNHgzRXVWNnI3U1JZaGl1MUJ6WDB4ZzMyOHpRV3pTR1BPM28xb01DNWhaWkwxWWtDCkF3RUFBYU5mTUYwd0RnWURWUjBQQVFIL0JBUURBZ1dnTUIwR0ExVWRKUVFXTUJRR0NDc0dBUVVGQndNQkJnZ3IKQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQU1CNEdBMVVkRVFRWE1CV0NFM1JoY0M1c2FXNXJaWEprTFhacAplaTV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFJRHRZQ0UyNHNTMTVtamdMZVdyc2VFZ09lZ3pydlNyCnpraXhSRnVIdU5QbHFMUEtLa0tiWnNiU1RrZm1xdTFtL0RoZjlWMmRvT0hYakdjekZJSmdXMDZUWmFleU1kWW0KRkVqVDE3eXZNZjhHbk82VzBmMmxFWlJjbGgrV2ZHYzVLOFh0UktOOEpGdjFtMlU3emNTRzk0aXVUSWc4Q1RkaQpqVHE2MkRYVUhlRU0rdWtFeTJNVUhjNTF6bDl2RHRwLzVvT2E3bzgvK3lVRGEvL3dldXdUM01XSFBObTdEUHNMCm1HR21kRks1K05lTHVLY2s1VC9WVlZBSmJEdXZpLzFXMjBGZzRKQzBEVmUrUlZEbTFzbXNyNElNRDV5REZmeW4KL29VckJ4M3hYdVFkZ2EvaHBpZU5iUmhqNXZqeTdPS3JHMVhEeHlldC9rMk44RVdVU3UyZEhGTT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
---
###
### Web RBAC
###
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
  resourceNames: ["linkerd-config"]
- apiGroups: [""]
  resources: ["namespaces", "configmaps"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["serviceaccounts", "pods"]
  verbs: ["list"]
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: web
  namespace: linkerd
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd
roleRef:
  kind: Role
  name: web
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles", "clusterrolebindings"]
  verbs: ["list"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["list"]
- apiGroups: ["admissionregistration.k8s.io"]
  resources: ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"]
  verbs: ["list"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list"]
- apiGroups: [""]
  resources: ["nodes", "pods", "services"]
  verbs: ["list"]
- apiGroups: ["apiregistration.k8s.io"]
  resources: ["apiservices"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-check
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-check
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-viz-web-admin
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-viz-tap-admin
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-linkerd-viz-web-api
  labels:
    linkerd.io/extension: viz
    component: web
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-viz-web-api
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: web
  namespace: linkerd-viz
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
---
###
### Metrics API
###
kind: Service
apiVersion: v1
metadata:
  name: metrics-api
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: metrics-api
  ports:
  - name: http
    port: 8085
    targetPort: 8085
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: metrics-api
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.13.5
    component: metrics-api
  name: metrics-api
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  template:
    metadata:
      annotations:
        checksum/config: b73fb1bf343c4203fbab8ee108c5eba2e07d184177e204677dc83d4cad2cd12b
        linkerd.io/created-by: linkerd/helm stable-2.13.5
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: metrics-api
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - -controller-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -cluster-domain=cluster.local
        - -prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/metrics-api:stable-2.13.5
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: metrics-api
        ports:
        - containerPort: 8085
          name: http
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          runAsNonRoot: true
          readOnlyRootFilesystem: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: metrics-api
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: metrics-api
  port: http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: metrics-api
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: metrics-api
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: MeshTLSAuthentication
    name: metrics-api-web
---
apiVersion: policy.linkerd.io/v1alpha1
kind: MeshTLSAuthentication
metadata:
  namespace: linkerd-viz
  name: metrics-api-web
  labels:
    linkerd.io/extension: viz
    component: metrics-api
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  identityRefs:
  - kind: ServiceAccount
    name: web
---
apiVersion: policy.linkerd.io/v1alpha1
kind: NetworkAuthentication
metadata:
  namespace: linkerd-viz
  name: kubelet
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  # Ideally, this should be restricted to the actual set of IPs kubelet uses in
  # a cluster. This can't easily be discovered.
  networks:
  - cidr: "0.0.0.0/0"
  - cidr: "::/0"
---
###
### Prometheus
###
kind: ConfigMap
apiVersion: v1
metadata:
  name: prometheus-config
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
data:
  prometheus.yml: |-
    global:
      evaluation_interval: 10s
      scrape_interval: 10s
      scrape_timeout: 10s

    rule_files:
    - /etc/prometheus/*_rules.yml
    - /etc/prometheus/*_rules.yaml

    scrape_configs:
    - job_name: 'prometheus'
      static_configs:
      - targets: ['localhost:9090']

    #  Required for: https://grafana.com/grafana/dashboards/315
    - job_name: 'kubernetes-nodes-cadvisor'
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
      metric_relabel_configs:
      - source_labels: [__name__]
        regex: '(container|machine)_(cpu|memory|network|fs)_(.+)'
        action: keep
      - source_labels: [__name__]
        regex: 'container_memory_failures_total' # unneeded large metric
        action: drop

    - job_name: 'linkerd-controller'
      kubernetes_sd_configs:
      - role: pod
        namespaces:
          names:
          - 'linkerd'
          - 'linkerd-viz'
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: admin-http
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-service-mirror'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_label_component
        - __meta_kubernetes_pod_container_port_name
        action: keep
        regex: linkerd-service-mirror;admin-http$
      - source_labels: [__meta_kubernetes_pod_container_name]
        action: replace
        target_label: component

    - job_name: 'linkerd-proxy'
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - source_labels:
        - __meta_kubernetes_pod_container_name
        - __meta_kubernetes_pod_container_port_name
        - __meta_kubernetes_pod_label_linkerd_io_control_plane_ns
        action: keep
        regex: ^linkerd-proxy;linkerd-admin;linkerd$
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: pod
      # special case k8s' "job" label, to not interfere with prometheus' "job"
      # label
      # __meta_kubernetes_pod_label_linkerd_io_proxy_job=foo =>
      # k8s_job=foo
      - source_labels: [__meta_kubernetes_pod_label_linkerd_io_proxy_job]
        action: replace
        target_label: k8s_job
      # drop __meta_kubernetes_pod_label_linkerd_io_proxy_job
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_job
      # __meta_kubernetes_pod_label_linkerd_io_proxy_deployment=foo =>
      # deployment=foo
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # drop all labels that we just made copies of in the previous labelmap
      - action: labeldrop
        regex: __meta_kubernetes_pod_label_linkerd_io_proxy_(.+)
      # __meta_kubernetes_pod_label_linkerd_io_foo=bar =>
      # foo=bar
      - action: labelmap
        regex: __meta_kubernetes_pod_label_linkerd_io_(.+)
      # Copy all pod labels to tmp labels
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
        replacement: __tmp_pod_label_$1
      # Take `linkerd_io_` prefixed labels and copy them without the prefix
      - action: labelmap
        regex: __tmp_pod_label_linkerd_io_(.+)
        replacement:  __tmp_pod_label_$1
      # Drop the `linkerd_io_` originals
      - action: labeldrop
        regex: __tmp_pod_label_linkerd_io_(.+)
      # Copy tmp labels into real labels
      - action: labelmap
        regex: __tmp_pod_label_(.+)
---
kind: Service
apiVersion: v1
metadata:
  name: prometheus
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: prometheus
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: prometheus
  ports:
  - name: admin-http
    port: 9090
    targetPort: 9090
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: prometheus
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.13.5
    component: prometheus
    namespace: linkerd-viz
  name: prometheus
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.13.5
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
      labels:
        linkerd.io/extension: viz
        component: prometheus
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - --log.level=info
        - --log.format=logfmt
        - --config.file=/etc/prometheus/prometheus.yml
        - --storage.tsdb.path=/data
        - --storage.tsdb.retention.time=6h
        image: prom/prometheus:v2.43.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        name: prometheus
        ports:
        - containerPort: 9090
          name: admin-http
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          timeoutSeconds: 30
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          runAsGroup: 65534
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /data
          name: data
        - mountPath: /etc/prometheus/prometheus.yml
          name: prometheus-config
          subPath: prometheus.yml
          readOnly: true
      securityContext:
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: prometheus
      volumes:
      - name: data
        emptyDir: {}
      - configMap:
          name: prometheus-config
        name: prometheus-config
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: prometheus-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: prometheus
      namespace: linkerd-viz
  port: admin-http
  proxyProtocol: HTTP/1
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: prometheus-admin
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: prometheus-admin
  requiredAuthenticationRefs:
    - kind: ServiceAccount
      name: metrics-api
      namespace: linkerd-viz
---
###
### Tap
###
kind: Service
apiVersion: v1
metadata:
  name: tap
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap
  ports:
  - name: grpc
    port: 8088
    targetPort: 8088
  - name: apiserver
    port: 443
    targetPort: apiserver
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.13.5
    component: tap
    namespace: linkerd-viz
  name: tap
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        checksum/config: ee79c2cef087a9e106c9b30729bf0e8578e3aaba3cbb5f668d8dda3f090a6e78
        linkerd.io/created-by: linkerd/helm stable-2.13.5
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: tap
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - api
        - -api-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -identity-trust-domain=cluster.local
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/tap:stable-2.13.5
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9998
          initialDelaySeconds: 10
        name: tap
        ports:
        - containerPort: 8088
          name: grpc
        - containerPort: 8089
          name: apiserver
        - containerPort: 9998
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9998
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: tap
      volumes:
      - name: tls
        secret:
          secretName: tap-k8s-tls
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: tap-api
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap
  port: apiserver
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: tap
  labels:
    linkerd.io/extension: viz
    component: tap
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: tap-api
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kube-api-server
---
###
### Tap Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-tap-injector
  labels:
    linkerd.io/extension: viz
subjects:
- kind: ServiceAccount
  name: tap-injector
  namespace: linkerd-viz
roleRef:
  kind: ClusterRole
  name: linkerd-tap-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
---
kind: Secret
apiVersion: v1
metadata:
  name: tap-injector-k8s-tls
  namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
  labels:
    linkerd.io/extension: viz
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRVENDQWltZ0F3SUJBZ0lSQUt0TnI1SCtJUzZSSmJsZUprTG1yTGN3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2RHRndMV2x1YW1WamRHOXlMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TXpBMwpNVFl3TURFNU16UmFGdzB5TkRBM01UVXdNREU1TXpSYU1DY3hKVEFqQmdOVkJBTVRISFJoY0MxcGJtcGxZM1J2CmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFDK2NKOWNtdm5mR0Q0RjFzbEpzVWVzRU56S2pTdW1kbkUrbGhwK05KemFkd0lpaUQ2MnRPd01qSENkSitxWgpndXYrTkowL3N3b1RQZm4rK3NKTkRvMFhVK1FzVjNrNWErbGdYMjB2QTdqaDFHdEJJWHRIczFWVGJIc0ZlWFhtCmZoNCtsR1hvckZtV3BveTFTdWJNdW1sTWNwTXo5NWU3b3dobFFqV2VmZnhycHEzaGFIcUg5NkYxL0l2UUNxWGoKTDJTR2VoWVVhUEpsMmZWbkw4Q3hjRHpDNk1kRHc1bXp1TDlzWXBQUWJyQXc1QThnVDZtc3lRSkF5ZnE0SjlXeAozVjdSVUcycUpidzduLy95elI4ZmRzRjVEYWtuVjIrcmVwMWdpTWxQbHJtSVVtUkF3S0tVSEFvV255YzVkV1l4CjFZdUFQQk8zN21hZzRTcmg5TkttcUVFakFnTUJBQUdqYURCbU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQW5CZ05WSFJFRQpJREFlZ2h4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBCkE0SUJBUUJGeHl1R0dHM25WQ3JPZXNSVm5VT2RMaVpRS3dmdTNxTlhhS1l3MCszQWFpWWhjbU5Lc056d3AvVzgKMElLQTQvdi9LWXdZN0J2SCs4Zm1LQVlvWHh6ajNXMjh2MmM4QUM0THRYYy92cnNETlhsWlk5bXQzTUZvb0RISgpwc3Q0eDZOSjZBZTBaYnZqRnFLRm5NY1BubnYrSktsdklUWkpDdC9DVHk4S1FCTHB4WmpIQms0SmtuWVJROWRQCjBJcHhwQ1h5UWZkZ0l3RzJ4aXU5dVVzczE5ajZ5V3FtYi9meHlTUXBzUDVaTmVkdi9qeGp2UWVpZEVLOFFUWVMKWTVGbXltSFBCQlRVSXBxMjlOSlE4RkM2MTNzQkdjcEpmTjIyOTdhbHljRzhuV3E5V21lQ1dNS1JHK3dncFY0ZAprYXB6U3dxQTRaSW90ZkVXUWRYNmlwb1BmbmdFCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdm5DZlhKcjUzeGcrQmRiSlNiRkhyQkRjeW8wcnBuWnhQcFlhZmpTYzJuY0NJb2crCnRyVHNESXh3blNmcW1ZTHIvalNkUDdNS0V6MzUvdnJDVFE2TkYxUGtMRmQ1T1d2cFlGOXRMd080NGRSclFTRjcKUjdOVlUyeDdCWGwxNW40ZVBwUmw2S3habHFhTXRVcm16THBwVEhLVE0vZVh1Nk1JWlVJMW5uMzhhNmF0NFdoNgpoL2VoZGZ5TDBBcWw0eTlraG5vV0ZHanlaZG4xWnkvQXNYQTh3dWpIUThPWnM3aS9iR0tUMEc2d01PUVBJRStwCnJNa0NRTW42dUNmVnNkMWUwVkJ0cWlXOE81Ly84czBmSDNiQmVRMnBKMWR2cTNxZFlJakpUNWE1aUZKa1FNQ2kKbEJ3S0ZwOG5PWFZtTWRXTGdEd1R0KzVtb09FcTRmVFNwcWhCSXdJREFRQUJBb0lCQVFDSWhPbnBFL3dPVHkyZgpOL05DVGNFSWUyb2NGZ2wxb3JEWjRmY0tCQ054aFNEVnFuL3lzRTRMVE40cCt3UjFtZUlkY0pCTnFzYU5Ocit4Clp3ZkUvNnByVDZ0aGtpK0gxM0VNc2p2dUdTZi9WQ3l6R3hKcU93ZnU3dlJkMzAyQ3QyUnREaXJrR2pGN0N0Z1IKMnFrTG1KS0Z5Qmo0aHdTUjhYVENTaTF2K2ZickgrbVhNYTgybGkzbE9HMCt1N1BFa1c2QzZhbVBzTklKdU1pTApKVkIzaURqMkpPM1B1RDNKbi9zUG82V3Q3Z2hnZ1lVQXlXMFFtcTRyUHJ4SnVLNWRMbDRlQlhBQngyNzVBQ3MwCkxKaExTbndNNmt2WWxZZURMOEd6bURCVHZXZXgzYXZBQ0E0dWJWY0xXbjJiWElzeTJCOWtiY2E5NkxmUktpaFEKTVh6RnJsZlJBb0dCQU1JNlVoamtmN05Penh2cTZQd0E2bmRQS0Nqb0I4dzBiMTk2b2JkUUlURmsvaU9hZEo2ZwptdUlLOVdGdXJsNjU3UkdhRXQ2ZzlvTnJHVTA0N1FTTTlhRUs0Njh5RjNpSGFoWFNvbzdnd3d4c1JOc25GbDBOCmk4UzJaSUZwQXJzbzZDc3F5aHZHbExBRm9LZnVHbWJkQVFsWnhidlkyNE0wVjBZL21KSG93NWlwQW9HQkFQc0IKNWk3RDNieXJHM0VoajdLK0UyazVDbnpDSWZFd0F2QkUzNGkvQXZ3Q2NkR1ExTTVEUW9zMHd6bGIzNUp6dnJpWAp1MTU1ZHBQS3dvd3Q0eGZHWmlnZ2RLMTQ2ZzA3dDBHeDRSNS9XRVZkWlNwVnk5SUQxc1NNNXlZWjBuS2x6d2dqCmtmcnlKaEFHNGgvY2Rqa1poQkE0SkxYdkZmN3MvODA1TGQ4QWZ1N3JBb0dBV3BKWnNGUDFuTWIyVzMxcTBnRVgKVlRXcmM0L24rdmpFcXRDRDB2amgwYWZYdndDS3UySUhkN3RHZS8zaUFEaFJiYkRjZGNhM3pjYkdrTFVvQ2NRMQowcmhDUG5Oc2NIOHRJQ29PTmZSbjRFWW93YzF6WjBjbTB6OStsTDVFVU1TZHAydVh2ZVlYZGhIWnZoV1JhRUJNCitIQk5mZkI5Ukt6R3VmSjBFaTVwNzZrQ2dZRUF6Q0RLUWtQVll1YkFKV3ZHd2ZUa01sRktIeFY5cHZpRm0wSlgKaTR6VGI0REpjVVZZV3ZuRjl4R01wbXY1ME05Q1RqcFBEVkM0Unc3QTBtRks2bjNWZkZLUXNMYkJtTXQwaC8rUgo5VXhZeStoZEttV2xvUUN3T3gzZnFWT2NtdElQSVM1VVBJR0t4TVBrUjBieCtoT3ZHOFdjelR4SFpnNzFKTCtZCmQxK2Uyc3NDZ1lCazIzQm9pV21Hdnd0N0RobmZUWnc3WDk0OFZoYk84TnExM3kwVnZtZGxudUpJOGV4MnErMDMKbFFsQjd3T3NXdk5oSmpWNm5jSTI1cTNaQnE4U1FCQkx6b015bmNkSXFhbHVIUHBmRUFCQ1I0TkJSSFFNazg2MQpQdWZtMGJML1NZZ0RNdytOZHFYd3RGMFBQN3ZDOXBXdFVVZGxIbVJacnR4Snd1NlNxT1doekE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-tap-injector-webhook-config
  labels:
    linkerd.io/extension: viz
webhooks:
- name: tap-injector.linkerd.io
  clientConfig:
    service:
      name: tap-injector
      namespace: linkerd-viz
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURRVENDQWltZ0F3SUJBZ0lSQUt0TnI1SCtJUzZSSmJsZUprTG1yTGN3RFFZSktvWklodmNOQVFFTEJRQXcKSnpFbE1DTUdBMVVFQXhNY2RHRndMV2x1YW1WamRHOXlMbXhwYm10bGNtUXRkbWw2TG5OMll6QWVGdzB5TXpBMwpNVFl3TURFNU16UmFGdzB5TkRBM01UVXdNREU1TXpSYU1DY3hKVEFqQmdOVkJBTVRISFJoY0MxcGJtcGxZM1J2CmNpNXNhVzVyWlhKa0xYWnBlaTV6ZG1Nd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUIKQVFDK2NKOWNtdm5mR0Q0RjFzbEpzVWVzRU56S2pTdW1kbkUrbGhwK05KemFkd0lpaUQ2MnRPd01qSENkSitxWgpndXYrTkowL3N3b1RQZm4rK3NKTkRvMFhVK1FzVjNrNWErbGdYMjB2QTdqaDFHdEJJWHRIczFWVGJIc0ZlWFhtCmZoNCtsR1hvckZtV3BveTFTdWJNdW1sTWNwTXo5NWU3b3dobFFqV2VmZnhycHEzaGFIcUg5NkYxL0l2UUNxWGoKTDJTR2VoWVVhUEpsMmZWbkw4Q3hjRHpDNk1kRHc1bXp1TDlzWXBQUWJyQXc1QThnVDZtc3lRSkF5ZnE0SjlXeAozVjdSVUcycUpidzduLy95elI4ZmRzRjVEYWtuVjIrcmVwMWdpTWxQbHJtSVVtUkF3S0tVSEFvV255YzVkV1l4CjFZdUFQQk8zN21hZzRTcmg5TkttcUVFakFnTUJBQUdqYURCbU1BNEdBMVVkRHdFQi93UUVBd0lGb0RBZEJnTlYKSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQW5CZ05WSFJFRQpJREFlZ2h4MFlYQXRhVzVxWldOMGIzSXViR2x1YTJWeVpDMTJhWG91YzNaak1BMEdDU3FHU0liM0RRRUJDd1VBCkE0SUJBUUJGeHl1R0dHM25WQ3JPZXNSVm5VT2RMaVpRS3dmdTNxTlhhS1l3MCszQWFpWWhjbU5Lc056d3AvVzgKMElLQTQvdi9LWXdZN0J2SCs4Zm1LQVlvWHh6ajNXMjh2MmM4QUM0THRYYy92cnNETlhsWlk5bXQzTUZvb0RISgpwc3Q0eDZOSjZBZTBaYnZqRnFLRm5NY1BubnYrSktsdklUWkpDdC9DVHk4S1FCTHB4WmpIQms0SmtuWVJROWRQCjBJcHhwQ1h5UWZkZ0l3RzJ4aXU5dVVzczE5ajZ5V3FtYi9meHlTUXBzUDVaTmVkdi9qeGp2UWVpZEVLOFFUWVMKWTVGbXltSFBCQlRVSXBxMjlOSlE4RkM2MTNzQkdjcEpmTjIyOTdhbHljRzhuV3E5V21lQ1dNS1JHK3dncFY0ZAprYXB6U3dxQTRaSW90ZkVXUWRYNmlwb1BmbmdFCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  failurePolicy: Ignore
  admissionReviewVersions: ["v1", "v1beta1"]
  reinvocationPolicy: IfNeeded
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods"]
  sideEffects: None
---
###
### Tap Injector
###
kind: Service
apiVersion: v1
metadata:
  name: tap-injector
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: tap-injector
  ports:
  - name: tap-injector
    port: 443
    targetPort: tap-injector
---
kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: tap-injector
    app.kubernetes.io/part-of: Linkerd
    component: tap-injector
  name: tap-injector
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      component: tap-injector
  template:
    metadata:
      annotations:
        checksum/config: 884ed0d8431dafe1038af7641609cee21792b6811623879df56edbc671ace2d1
        linkerd.io/created-by: linkerd/helm stable-2.13.5
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: tap-injector
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      
      containers:
      - args:
        - injector
        - -tap-service-name=tap.linkerd-viz.serviceaccount.identity.linkerd.cluster.local
        - -log-level=info
        - -log-format=plain
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/tap:stable-2.13.5
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: tap-injector
        ports:
        - containerPort: 8443
          name: tap-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: tap-injector
      volumes:
      - name: tls
        secret:
          secretName: tap-injector-k8s-tls
---
apiVersion: policy.linkerd.io/v1beta1
kind: Server
metadata:
  namespace: linkerd-viz
  name: tap-injector-webhook
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  podSelector:
    matchLabels:
      linkerd.io/extension: viz
      component: tap-injector
  port: tap-injector
  proxyProtocol: TLS
---
apiVersion: policy.linkerd.io/v1alpha1
kind: AuthorizationPolicy
metadata:
  namespace: linkerd-viz
  name: tap-injector
  labels:
    linkerd.io/extension: viz
    component: tap-injector
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  targetRef:
    group: policy.linkerd.io
    kind: Server
    name: tap-injector-webhook
  requiredAuthenticationRefs:
  - group: policy.linkerd.io
    kind: NetworkAuthentication
    name: kube-api-server
---
apiVersion: policy.linkerd.io/v1alpha1
kind: NetworkAuthentication
metadata:
  namespace: linkerd-viz
  name: kube-api-server
  labels:
    linkerd.io/extension: viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
spec:
  # Ideally, this should be restricted to the actual set of IPs the kubelet API
  # server uses for webhooks in a cluster. This can't easily be discovered.
  networks:
  - cidr: "0.0.0.0/0"
  - cidr: "::/0"
---
###
### Web
###
kind: Service
apiVersion: v1
metadata:
  name: web
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
    component: web
    namespace: linkerd-viz
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
    
    linkerd.io/inject: enabled
spec:
  type: ClusterIP
  selector:
    linkerd.io/extension: viz
    component: web
  ports:
  - name: http
    port: 8084
    targetPort: 8084
  - name: admin-http
    port: 9994
    targetPort: 9994
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/helm stable-2.13.5
    linkerd.io/inject: enabled
    config.linkerd.io/proxy-await: "enabled"
  labels:
    linkerd.io/extension: viz
    app.kubernetes.io/name: web
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.13.5
    component: web
    namespace: linkerd-viz
  name: web
  namespace: linkerd-viz
spec:
  replicas: 1
  selector:
    matchLabels:
      linkerd.io/extension: viz
      component: web
      namespace: linkerd-viz
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/helm stable-2.13.5
        linkerd.io/inject: enabled
        config.alpha.linkerd.io/proxy-wait-before-exit-seconds: "0"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
      labels:
        linkerd.io/extension: viz
        component: web
        namespace: linkerd-viz
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      containers:
      - args:
        - -linkerd-metrics-api-addr=metrics-api.linkerd-viz.svc.cluster.local:8085
        - -cluster-domain=cluster.local
        - -controller-namespace=linkerd
        - -log-level=info
        - -log-format=plain
        - -enforced-host=^(localhost|127\.0\.0\.1|web\.linkerd-viz\.svc\.cluster\.local|web\.linkerd-viz\.svc|\[::1\])(:\d+)?$
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/web:stable-2.13.5
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9994
          initialDelaySeconds: 10
        name: web
        ports:
        - containerPort: 8084
          name: http
        - containerPort: 9994
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9994
        resources:
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 2103
          seccompProfile:
            type: RuntimeDefault
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: web
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: metrics-api.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
spec:
  routes:
  - name: POST /api/v1/StatSummary
    condition:
      method: POST
      pathRegex: /api/v1/StatSummary
  - name: POST /api/v1/TopRoutes
    condition:
      method: POST
      pathRegex: /api/v1/TopRoutes
  - name: POST /api/v1/ListPods
    condition:
      method: POST
      pathRegex: /api/v1/ListPods
  - name: POST /api/v1/ListServices
    condition:
      method: POST
      pathRegex: /api/v1/ListServices
  - name: POST /api/v1/SelfCheck
    condition:
      method: POST
      pathRegex: /api/v1/SelfCheck
  - name: POST /api/v1/Gateways
    condition:
      method: POST
      pathRegex: /api/v1/Gateways
  - name: POST /api/v1/Edges
    condition:
      method: POST
      pathRegex: /api/v1/Edges
---
apiVersion: linkerd.io/v1alpha2
kind: ServiceProfile
metadata:
  name: prometheus.linkerd-viz.svc.cluster.local
  namespace: linkerd-viz
  labels:
    linkerd.io/extension: viz
spec:
  routes:
  - name: POST /api/v1/query
    condition:
      method: POST
      pathRegex: /api/v1/query
  - name: GET /api/v1/query_range
    condition:
      method: GET
      pathRegex: /api/v1/query_range
  - name: GET /api/v1/series
    condition:
      method: GET
      pathRegex: /api/v1/series
